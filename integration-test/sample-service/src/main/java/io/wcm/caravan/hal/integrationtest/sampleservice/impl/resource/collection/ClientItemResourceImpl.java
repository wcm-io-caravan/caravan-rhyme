/*
 * #%L
 * wcm.io
 * %%
 * Copyright (C) 2018 wcm.io
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package io.wcm.caravan.hal.integrationtest.sampleservice.impl.resource.collection;

import io.reactivex.rxjava3.core.Single;
import io.wcm.caravan.hal.integrationtest.sampleservice.api.collection.ItemResource;
import io.wcm.caravan.hal.integrationtest.sampleservice.api.collection.ItemState;
import io.wcm.caravan.hal.integrationtest.sampleservice.impl.context.ExampleServiceRequestContext;
import io.wcm.caravan.hal.microservices.caravan.CaravanHalApiClient;
import io.wcm.caravan.hal.resource.Link;
import io.wcm.caravan.reha.api.resources.LinkableResource;

/**
 * An example for a resource that fetches the given generated by {@link DelayableItemResourceImpl}
 * by HTTP using a proxy created via {@link CaravanHalApiClient}
 */
public class ClientItemResourceImpl implements ItemResource, LinkableResource {

  private final ExampleServiceRequestContext context;

  private final Integer index;
  private final Integer delayMs;

  public ClientItemResourceImpl(ExampleServiceRequestContext context, Integer index, Integer delayMs) {
    this.context = context;
    this.index = index;
    this.delayMs = delayMs;
  }

  @Override
  public Single<ItemState> getProperties() {

    return context.getUpstreamEntryPoint()
        .getCollectionExamples()
        .flatMap(examples -> examples.getItem(index, delayMs))
        .flatMap(ItemResource::getProperties);
  }

  @Override
  public Link createLink() {

    String title;
    if (index != null) {
      title = "The item with index " + index + " loaded through the HalApiClient";
      if (delayMs != null) {
        title += " with a simulated server-side delay of " + delayMs + "ms";
      }
    }
    else {
      title = "Load an item through the HalApiClient and specify the simulated delay to apply on the server-side";
    }

    return context.buildLinkTo((resource, uriInfo, response) -> resource.getClientItem(uriInfo, response, index, delayMs))
        .setTitle(title);
  }
}
