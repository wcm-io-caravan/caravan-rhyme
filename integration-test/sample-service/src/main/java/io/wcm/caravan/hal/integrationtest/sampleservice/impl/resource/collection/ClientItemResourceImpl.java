/*
 * #%L
 * wcm.io
 * %%
 * Copyright (C) 2018 wcm.io
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package io.wcm.caravan.hal.integrationtest.sampleservice.impl.resource.collection;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.QueryParam;
import javax.ws.rs.container.AsyncResponse;
import javax.ws.rs.container.Suspended;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.UriInfo;

import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.osgi.service.component.annotations.ReferenceScope;
import org.osgi.service.component.annotations.ServiceScope;
import org.osgi.service.jaxrs.whiteboard.propertytypes.JaxrsApplicationSelect;
import org.osgi.service.jaxrs.whiteboard.propertytypes.JaxrsResource;

import io.reactivex.Single;
import io.wcm.caravan.hal.integrationtest.sampleservice.api.ExamplesEntryPointResource;
import io.wcm.caravan.hal.integrationtest.sampleservice.api.collection.ItemResource;
import io.wcm.caravan.hal.integrationtest.sampleservice.api.collection.ItemState;
import io.wcm.caravan.hal.integrationtest.sampleservice.impl.context.ExampleServiceApplication;
import io.wcm.caravan.hal.integrationtest.sampleservice.impl.context.ExampleServiceRequestContext;
import io.wcm.caravan.hal.microservices.api.server.LinkableResource;
import io.wcm.caravan.hal.microservices.caravan.CaravanHalApiClient;
import io.wcm.caravan.hal.resource.Link;

/**
 * An example for a resource that fetches the given generated by {@link DelayableItemResourceImpl}
 * by HTTP using a proxy created via {@link CaravanHalApiClient}
 */
@Component(service = ClientItemResourceImpl.class, scope = ServiceScope.PROTOTYPE)
@JaxrsResource
@JaxrsApplicationSelect(ExampleServiceApplication.SELECTOR)
@Path("/collections/client/items/{index}")
public class ClientItemResourceImpl implements ItemResource, LinkableResource {

  @Reference(scope = ReferenceScope.PROTOTYPE_REQUIRED)
  private ExampleServiceRequestContext context;

  @PathParam("index")
  private Integer index;
  @QueryParam("delayMs")
  private Integer delayMs;

  public ClientItemResourceImpl() {

  }

  public ClientItemResourceImpl(ExampleServiceRequestContext context, Integer index, Integer delayMs) {

    this.context = context;
    this.index = index;
    this.delayMs = delayMs;
  }

  @Override
  public Single<ItemState> getProperties() {

    return context.getUpstreamEntryPoint()
        .flatMap(ExamplesEntryPointResource::getCollectionExamples)
        .flatMap(examples -> examples.getItem(index, delayMs))
        .flatMap(ItemResource::getProperties);
  }

  @Override
  public Link createLink() {

    String title;
    if (index != null) {
      title = "The item with index " + index + " loaded through the HalApiClient";
      if (delayMs != null) {
        title += " with a simulated server-side delay of " + delayMs + "ms";
      }
    }
    else {
      title = "Load an item through the HalApiClient and specify the simulated delay to apply on the server-side";
    }

    return context.buildLinkTo(this).setTitle(title);
  }

  @GET
  public void get(@Context UriInfo uriInfo, @Suspended AsyncResponse response) {
    context.respondWith(uriInfo, this, response);
  }


}
